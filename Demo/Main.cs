/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘Demo.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir84 = null;
        public BindDirection bind_dir85 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity18 = null;
        public BindDirection bind_dir86 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity18_Policy = null;
        public BindDirection bind_dir87 = null;
        public BindDirection bind_dir88 = null;
        public BindDirection bind_dir89 = null;
        public BindDirection bind_dir90 = null;
        public BindDirection bind_dir91 = null;
        public BindDirection bind_dir92 = null;
        public BindDirection bind_dir93 = null;
        public BindDirection bind_dir94 = null;
        public BindDirection bind_dir95 = null;
        public BindDirection bind_dir96 = null;
        public BindDirection bind_dir97 = null;
        public BindDirection bind_dir98 = null;
        public BindDirection bind_dir99 = null;
        public BindDirection bind_dir100 = null;
        public BindDirection bind_dir101 = null;
        public BindDirection bind_dir102 = null;
        public BindDirection bind_dir103 = null;
        public BindDirection bind_dir104 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity14 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity14");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.ForEach);
            _flow.DataExporterActivity16 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity16");
            _flow.DataExporterCloseActivity17 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity17");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity15 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity15");
            this.DataCursorActivity18 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity18");
            this.DataCursorActivity18_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence13 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence13");
            _flow.StServiceCallActivity8 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity8");
            _flow.StServiceCallActivity11 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity11");
            _flow.StServiceCallActivity12 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity12");
            _flow.DataFetchActivity14.Comment = @"";
            _flow.DataFetchActivity14.IconPath = @"";
            _flow.DataFetchActivity14.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity14.QueryClassName = @"HP.ST.Ext.CustomDataProviders.LocalDataQuery";
            XmlDocument DataFetchActivity14_QueryParameters_Document = new XmlDocument();
            DataFetchActivity14_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity14Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>67b14dbf-c463-4816-b15c-ba9bec5c9b99</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>Customers</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>TableStructure</Name><Value>Name,String,|Depart,String,|Arrive,String,|date,Date,</Value></QueryParameter><QueryParameter><Name>TableContents</Name><Value>Rob|Paris|Portland|7/15/2020 12:00:00 AM^Peter|Seattle|Paris|6/26/2020 12:00:00 AM^John|London|Seattle|6/29/2020 12:00:00 AM</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity14_QueryParameters_Document.LoadXml(xmlDataFetchActivity14Params);
            _flow.DataFetchActivity14.QueryParameters = DataFetchActivity14_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("Customers", _flow.DataFetchActivity14);
            this.Activities.Add (_flow.DataFetchActivity14);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"Start";
            _flow.StartActivity1.JVM = new HP.ST.Ext.BasicActivities.JVMProperties();
            _flow.StartActivity1.IsJavaUsed = false;
            _flow.StartActivity1.JVM.Classpath = @"%CLASSPATH%";
            _flow.StartActivity1.JVM.AdditionalVMParameters = @"";
            _flow.StartActivity1.JMS = new HP.ST.Ext.BasicActivities.JMSProperties();
            _flow.StartActivity1.IsJmsUsed = false;
            _flow.StartActivity1.JMS.JNDIContextFactory = @"<Select...>";
            _flow.StartActivity1.JMS.JNDIProviderUrl = @"";
            _flow.StartActivity1.JMS.JMSConnectionFactory = @"";
            _flow.StartActivity1.JMS.SecurityPrincipal = @"";
            _flow.StartActivity1.JMS.SecurityCredentials = @"";
            _flow.StartActivity1.JMS.JMSClientID = @"";
            _flow.StartActivity1.JMS.SSLPassword = @"";
            _flow.StartActivity1.JMS.SSLTrustedCertificate = @"";
            _flow.StartActivity1.JMS.SSLIdentity = @"";
            _flow.StartActivity1.JMS.ConnectionsPerProcess = @"1";
            _flow.StartActivity1.JMS.TimeoutOptions = @"DN_User_defined_Timeout";
            _flow.StartActivity1.JMS.UserTimeout = @"20";
            _flow.StartActivity1.JMS.GenerateAutoSelector = @"No";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"For each item in {DataSource.Customers}";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Condition += delegate(object sender,STActivityBaseEventArgs e)
            {
            return !DataCursorActivity18.IsAtEndPosition;
            };
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"Test Flow";
            _flow.Loop2.Activities.Add (this.DataCursorActivity18);
            _flow.Loop2.Activities.Add (_flow.Sequence13);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity16.Comment = @"";
            _flow.DataExporterActivity16.IconPath = @"";
            VTDPropertyInfoBase pi167 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter84 = new VTDObjectGetter(pi167);
            VTDPropertyInfoBase pi168 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter84 = new VTDObjectSetter(pi168);
            binding_setter84 = new StringFormaterDecorator(binding_setter84,"{Step.DataFetchActivity14.OutTable}");
            bind_dir84 = new BindDirection(_flow.DataFetchActivity14,binding_getter84,binding_setter84,BindTargetType.ToInProperty);
            _flow.DataExporterActivity16.InDirections.Add(bind_dir84);
            this.Activities.Add (_flow.DataExporterActivity16);
            _flow.DataExporterCloseActivity17.Comment = @"";
            _flow.DataExporterCloseActivity17.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity17);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"End";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity15.Comment = @"";
            _flow.DataDisconnectActivity15.IconPath = @"";
            VTDPropertyInfoBase pi169 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter85 = new VTDObjectGetter(pi169);
            VTDPropertyInfoBase pi170 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter85 = new VTDObjectSetter(pi170);
            binding_setter85 = new StringFormaterDecorator(binding_setter85,"{Step.DataFetchActivity14.OutTable}");
            bind_dir85 = new BindDirection(_flow.DataFetchActivity14,binding_getter85,binding_setter85,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity15.InDirections.Add(bind_dir85);
            this.Activities.Add (_flow.DataDisconnectActivity15);
            this.DataCursorActivity18.Comment = @"";
            this.DataCursorActivity18.IconPath = @"";
            VTDPropertyInfoBase pi171 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter86 = new VTDObjectGetter(pi171);
            VTDPropertyInfoBase pi172 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter86 = new VTDObjectSetter(pi172);
            binding_setter86 = new StringFormaterDecorator(binding_setter86,"{Step.DataFetchActivity14.OutTable}");
            bind_dir86 = new BindDirection(_flow.DataFetchActivity14,binding_getter86,binding_setter86,BindTargetType.ToInProperty);
            this.DataCursorActivity18.InDirections.Add(bind_dir86);
            this.DataCursorActivity18_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity18_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity18_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity18_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity18_Policy.StartCondition.Value = "";
            this.DataCursorActivity18_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity18_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity18_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity18_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity18_Policy.EndCondition.Value = "";
            this.DataCursorActivity18_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity18_Policy.StepSize = 1;
            this.DataCursorActivity18_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity18.Policy = this.DataCursorActivity18_Policy;
            this.DataCursorActivity18.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity18.ResetCursor;
            _flow.Sequence13.Comment = @"";
            _flow.Sequence13.IconPath = @"";
            _flow.Sequence13.Name = @"Sequence13";
            _flow.Sequence13.Activities.Add (_flow.StServiceCallActivity8);
            _flow.Sequence13.Activities.Add (_flow.StServiceCallActivity11);
            _flow.Sequence13.Activities.Add (_flow.StServiceCallActivity12);
            XmlDocument StServiceCallActivity8_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity8_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity8_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><GetFlights xmlns=""HP.SOAQ.SampleApp""><DepartureCity>{DataSource.Customers.Depart}</DepartureCity><ArrivalCity>{DataSource.Customers.Arrive}</ArrivalCity><FlightDate>{DataSource.Customers.date}</FlightDate></GetFlights></Body></Envelope>");
            _flow.StServiceCallActivity8.InputEnvelope = StServiceCallActivity8_InputEnvelope_Document;
            _flow.StServiceCallActivity8.Comment = @"";
            _flow.StServiceCallActivity8.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity8.Name = @"GetFlights";
            _flow.StServiceCallActivity8.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity8.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/Flights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity8.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity8.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/GetFlights";
            _flow.StServiceCallActivity8.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity8.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity8.Service = @"Flights_Service";
            _flow.StServiceCallActivity8.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity8.Operation = @"GetFlights";
            _flow.StServiceCallActivity8.IsOneWay = false;
            _flow.StServiceCallActivity8.SendRequestToService=true;
            _flow.StServiceCallActivity8.FaultExpected=false;
            _flow.StServiceCallActivity8.IsAsync=false;
            _flow.StServiceCallActivity8.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity8.ListenOnPort = (int)0;
            VTDPropertyInfoBase pi173 = new VTDPropertyInfoBase("date");
            VTDBaseGetter binding_getter87 = new VTDObjectGetter(pi173);
            VTDPropertyInfoBase pi174 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlights'][1]/*[local-name(.)='FlightDate'][1]");
            VTDBaseSetter binding_setter87 = new VTDXPathSetter(pi174,XmlTypeCode.DateTime);
            bind_dir87 = new BindDirection(this.DataCursorActivity18,binding_getter87,binding_setter87,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity8.InDirections.Add(bind_dir87);
            VTDPropertyInfoBase pi175 = new VTDPropertyInfoBase("Depart");
            VTDBaseGetter binding_getter88 = new VTDObjectGetter(pi175);
            VTDPropertyInfoBase pi176 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlights'][1]/*[local-name(.)='DepartureCity'][1]");
            VTDBaseSetter binding_setter88 = new VTDXPathSetter(pi176,XmlTypeCode.String);
            binding_setter88 = new StringFormaterDecorator(binding_setter88,"{DataSource.Customers.Depart}");
            bind_dir88 = new BindDirection(this.DataCursorActivity18,binding_getter88,binding_setter88,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity8.InDirections.Add(bind_dir88);
            VTDPropertyInfoBase pi177 = new VTDPropertyInfoBase("Arrive");
            VTDBaseGetter binding_getter89 = new VTDObjectGetter(pi177);
            VTDPropertyInfoBase pi178 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlights'][1]/*[local-name(.)='ArrivalCity'][1]");
            VTDBaseSetter binding_setter89 = new VTDXPathSetter(pi178,XmlTypeCode.String);
            binding_setter89 = new StringFormaterDecorator(binding_setter89,"{DataSource.Customers.Arrive}");
            bind_dir89 = new BindDirection(this.DataCursorActivity18,binding_getter89,binding_setter89,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity8.InDirections.Add(bind_dir89);
            XmlDocument StServiceCallActivity8_ExpectedOutputProperties_Document = new XmlDocument();
            StServiceCallActivity8_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity8_ExpectedOutputProperties_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><GetFlightsResponse xmlns=""HP.SOAQ.SampleApp""><GetFlightsResult><Flight><Airline p1:nil=""true"" /><ArrivalCity p1:nil=""true"" /><ArrivalTime p1:nil=""true"" /><DepartureCity p1:nil=""true"" /><DepartureTime p1:nil=""true"" /><FlightNumber /></Flight></GetFlightsResult></GetFlightsResponse></Body></Envelope>");
            _flow.StServiceCallActivity8.ExpectedOutputProperties = StServiceCallActivity8_ExpectedOutputProperties_Document;
            XmlDocument StServiceCallActivity8_ExpectedFaultProperties_Document = new XmlDocument();
            StServiceCallActivity8_ExpectedFaultProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity8_ExpectedFaultProperties_Document.LoadXml(
@"<tns:Envelope xmlns:tns=""http://schemas.xmlsoap.org/soap/envelope/""><tns:Body><tns:Fault><faultcode /><faultstring /></tns:Fault></tns:Body></tns:Envelope>");
            _flow.StServiceCallActivity8.ExpectedFaultProperties = StServiceCallActivity8_ExpectedFaultProperties_Document;
            XmlDocument StServiceCallActivity8_ExpectedOutputAttachments_Document = new XmlDocument();
            StServiceCallActivity8_ExpectedOutputAttachments_Document.PreserveWhitespace = true;
            StServiceCallActivity8_ExpectedOutputAttachments_Document.LoadXml(
@"<OutputAttachments />");
            _flow.StServiceCallActivity8.ExpectedOutputAttachments = StServiceCallActivity8_ExpectedOutputAttachments_Document;
            set_StServiceCallActivity8_checkpoints(_flow.StServiceCallActivity8);
            XmlDocument StServiceCallActivity11_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity11_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity11_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><CreateFlightOrder xmlns=""HP.SOAQ.SampleApp""><FlightOrder><Class>Business</Class><CustomerName>{DataSource.Customers.Name}</CustomerName><DepartureDate>{Step.InputProperties.StServiceCallActivity8.Body.GetFlights.FlightDate}</DepartureDate><FlightNumber>{Step.OutputProperties.StServiceCallActivity8.Body.GetFlightsResponse.GetFlightsResult.Flight[1].FlightNumber}</FlightNumber><NumberOfTickets>1</NumberOfTickets></FlightOrder></CreateFlightOrder></Body></Envelope>");
            _flow.StServiceCallActivity11.InputEnvelope = StServiceCallActivity11_InputEnvelope_Document;
            _flow.StServiceCallActivity11.Comment = @"";
            _flow.StServiceCallActivity11.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity11.Name = @"CreateFlightOrder";
            _flow.StServiceCallActivity11.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity11.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/Flights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity11.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity11.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/CreateFlightOrder";
            _flow.StServiceCallActivity11.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity11.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity11.Service = @"Flights_Service";
            _flow.StServiceCallActivity11.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity11.Operation = @"CreateFlightOrder";
            _flow.StServiceCallActivity11.IsOneWay = false;
            _flow.StServiceCallActivity11.SendRequestToService=true;
            _flow.StServiceCallActivity11.FaultExpected=false;
            _flow.StServiceCallActivity11.IsAsync=false;
            _flow.StServiceCallActivity11.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity11.ListenOnPort = (int)0;
            VTDPropertyInfoBase pi179 = new VTDPropertyInfoBase("OutputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightsResponse'][1]/*[local-name(.)='GetFlightsResult'][1]/*[local-name(.)='Flight'][1]/*[local-name(.)='FlightNumber'][1]");
            VTDBaseGetter binding_getter90 = new VTDXPathGetter(pi179,XmlTypeCode.Int);
            binding_getter90 = new XPathGetterDecorator(binding_getter90,"{Array0}",1);
            VTDPropertyInfoBase pi180 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='FlightNumber'][1]");
            VTDBaseSetter binding_setter90 = new VTDXPathSetter(pi180,XmlTypeCode.Int);
            bind_dir90 = new BindDirection(_flow.StServiceCallActivity8,binding_getter90,binding_setter90,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity11.InDirections.Add(bind_dir90);
            VTDPropertyInfoBase pi181 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlights'][1]/*[local-name(.)='FlightDate'][1]");
            VTDBaseGetter binding_getter91 = new VTDXPathGetter(pi181,XmlTypeCode.DateTime);
            VTDPropertyInfoBase pi182 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='DepartureDate'][1]");
            VTDBaseSetter binding_setter91 = new VTDXPathSetter(pi182,XmlTypeCode.DateTime);
            bind_dir91 = new BindDirection(_flow.StServiceCallActivity8,binding_getter91,binding_setter91,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity11.InDirections.Add(bind_dir91);
            VTDPropertyInfoBase pi183 = new VTDPropertyInfoBase("Name");
            VTDBaseGetter binding_getter92 = new VTDObjectGetter(pi183);
            VTDPropertyInfoBase pi184 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='CustomerName'][1]");
            VTDBaseSetter binding_setter92 = new VTDXPathSetter(pi184,XmlTypeCode.String);
            binding_setter92 = new StringFormaterDecorator(binding_setter92,"{DataSource.Customers.Name}");
            bind_dir92 = new BindDirection(this.DataCursorActivity18,binding_getter92,binding_setter92,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity11.InDirections.Add(bind_dir92);
            XmlDocument StServiceCallActivity11_ExpectedOutputProperties_Document = new XmlDocument();
            StServiceCallActivity11_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity11_ExpectedOutputProperties_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><CreateFlightOrderResponse xmlns=""HP.SOAQ.SampleApp""><CreateFlightOrderResult><OrderNumber>90</OrderNumber></CreateFlightOrderResult></CreateFlightOrderResponse></Body></Envelope>");
            _flow.StServiceCallActivity11.ExpectedOutputProperties = StServiceCallActivity11_ExpectedOutputProperties_Document;
            XmlDocument StServiceCallActivity11_ExpectedFaultProperties_Document = new XmlDocument();
            StServiceCallActivity11_ExpectedFaultProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity11_ExpectedFaultProperties_Document.LoadXml(
@"<tns:Envelope xmlns:tns=""http://schemas.xmlsoap.org/soap/envelope/""><tns:Body><tns:Fault><faultcode /><faultstring /></tns:Fault></tns:Body></tns:Envelope>");
            _flow.StServiceCallActivity11.ExpectedFaultProperties = StServiceCallActivity11_ExpectedFaultProperties_Document;
            XmlDocument StServiceCallActivity11_ExpectedOutputAttachments_Document = new XmlDocument();
            StServiceCallActivity11_ExpectedOutputAttachments_Document.PreserveWhitespace = true;
            StServiceCallActivity11_ExpectedOutputAttachments_Document.LoadXml(
@"<OutputAttachments />");
            _flow.StServiceCallActivity11.ExpectedOutputAttachments = StServiceCallActivity11_ExpectedOutputAttachments_Document;
            set_StServiceCallActivity11_checkpoints(_flow.StServiceCallActivity11);
            XmlDocument StServiceCallActivity12_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity12_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity12_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><GetFlightOrders xmlns=""HP.SOAQ.SampleApp""><FlightsDetails><OrderNumber>{Step.OutputProperties.StServiceCallActivity11.Body.CreateFlightOrderResponse.CreateFlightOrderResult.OrderNumber}</OrderNumber></FlightsDetails></GetFlightOrders></Body></Envelope>");
            _flow.StServiceCallActivity12.InputEnvelope = StServiceCallActivity12_InputEnvelope_Document;
            _flow.StServiceCallActivity12.Comment = @"";
            _flow.StServiceCallActivity12.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity12.Name = @"GetFlightOrders";
            _flow.StServiceCallActivity12.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity12.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/Flights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity12.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity12.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/GetFlightOrders";
            _flow.StServiceCallActivity12.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity12.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity12.Service = @"Flights_Service";
            _flow.StServiceCallActivity12.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity12.Operation = @"GetFlightOrders";
            _flow.StServiceCallActivity12.IsOneWay = false;
            _flow.StServiceCallActivity12.SendRequestToService=true;
            _flow.StServiceCallActivity12.FaultExpected=false;
            _flow.StServiceCallActivity12.IsAsync=false;
            _flow.StServiceCallActivity12.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity12.ListenOnPort = (int)0;
            VTDPropertyInfoBase pi185 = new VTDPropertyInfoBase("OutputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrderResponse'][1]/*[local-name(.)='CreateFlightOrderResult'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseGetter binding_getter93 = new VTDXPathGetter(pi185,XmlTypeCode.Int);
            VTDPropertyInfoBase pi186 = new VTDPropertyInfoBase("ExpectedOutputProperties","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrdersResponse'][1]/*[local-name(.)='GetFlightOrdersResult'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseSetter binding_setter93 = new VTDXPathSetter(pi186,XmlTypeCode.Int);
            bind_dir93 = new BindDirection(_flow.StServiceCallActivity11,binding_getter93,binding_setter93,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity12.InDirections.Add(bind_dir93);
            VTDPropertyInfoBase pi187 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='NumberOfTickets'][1]");
            VTDBaseGetter binding_getter94 = new VTDXPathGetter(pi187,XmlTypeCode.Int);
            VTDPropertyInfoBase pi188 = new VTDPropertyInfoBase("ExpectedOutputProperties","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrdersResponse'][1]/*[local-name(.)='GetFlightOrdersResult'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='NumberOfTickets'][1]");
            VTDBaseSetter binding_setter94 = new VTDXPathSetter(pi188,XmlTypeCode.Int);
            bind_dir94 = new BindDirection(_flow.StServiceCallActivity11,binding_getter94,binding_setter94,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity12.InDirections.Add(bind_dir94);
            VTDPropertyInfoBase pi189 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='FlightNumber'][1]");
            VTDBaseGetter binding_getter95 = new VTDXPathGetter(pi189,XmlTypeCode.Int);
            VTDPropertyInfoBase pi190 = new VTDPropertyInfoBase("ExpectedOutputProperties","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrdersResponse'][1]/*[local-name(.)='GetFlightOrdersResult'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='FlightNumber'][1]");
            VTDBaseSetter binding_setter95 = new VTDXPathSetter(pi190,XmlTypeCode.Int);
            bind_dir95 = new BindDirection(_flow.StServiceCallActivity11,binding_getter95,binding_setter95,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity12.InDirections.Add(bind_dir95);
            VTDPropertyInfoBase pi191 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='DepartureDate'][1]");
            VTDBaseGetter binding_getter96 = new VTDXPathGetter(pi191,XmlTypeCode.DateTime);
            VTDPropertyInfoBase pi192 = new VTDPropertyInfoBase("ExpectedOutputProperties","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrdersResponse'][1]/*[local-name(.)='GetFlightOrdersResult'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='DepartureDate'][1]");
            VTDBaseSetter binding_setter96 = new VTDXPathSetter(pi192,XmlTypeCode.DateTime);
            bind_dir96 = new BindDirection(_flow.StServiceCallActivity11,binding_getter96,binding_setter96,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity12.InDirections.Add(bind_dir96);
            VTDPropertyInfoBase pi193 = new VTDPropertyInfoBase("Name");
            VTDBaseGetter binding_getter97 = new VTDObjectGetter(pi193);
            VTDPropertyInfoBase pi194 = new VTDPropertyInfoBase("ExpectedOutputProperties","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrdersResponse'][1]/*[local-name(.)='GetFlightOrdersResult'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='CustomerName'][1]");
            VTDBaseSetter binding_setter97 = new VTDXPathSetter(pi194,XmlTypeCode.String);
            binding_setter97 = new StringFormaterDecorator(binding_setter97,"{DataSource.Customers.Name}");
            bind_dir97 = new BindDirection(this.DataCursorActivity18,binding_getter97,binding_setter97,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity12.InDirections.Add(bind_dir97);
            VTDPropertyInfoBase pi195 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='Class'][1]");
            VTDBaseGetter binding_getter98 = new VTDXPathGetter(pi195,XmlTypeCode.String);
            VTDPropertyInfoBase pi196 = new VTDPropertyInfoBase("ExpectedOutputProperties","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrdersResponse'][1]/*[local-name(.)='GetFlightOrdersResult'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='Class'][1]");
            VTDBaseSetter binding_setter98 = new VTDXPathSetter(pi196,XmlTypeCode.String);
            binding_setter98 = new StringFormaterDecorator(binding_setter98,"{Step.InputProperties.StServiceCallActivity11.Body.CreateFlightOrder.FlightOrder.Class}");
            bind_dir98 = new BindDirection(_flow.StServiceCallActivity11,binding_getter98,binding_setter98,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity12.InDirections.Add(bind_dir98);
            VTDPropertyInfoBase pi197 = new VTDPropertyInfoBase("OutputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrderResponse'][1]/*[local-name(.)='CreateFlightOrderResult'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseGetter binding_getter99 = new VTDXPathGetter(pi197,XmlTypeCode.Int);
            VTDPropertyInfoBase pi198 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrders'][1]/*[local-name(.)='FlightsDetails'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseSetter binding_setter99 = new VTDXPathSetter(pi198,XmlTypeCode.Int);
            bind_dir99 = new BindDirection(_flow.StServiceCallActivity11,binding_getter99,binding_setter99,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity12.InDirections.Add(bind_dir99);
            XmlDocument StServiceCallActivity12_ExpectedOutputProperties_Document = new XmlDocument();
            StServiceCallActivity12_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity12_ExpectedOutputProperties_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><GetFlightOrdersResponse xmlns=""HP.SOAQ.SampleApp""><GetFlightOrdersResult><FlightOrder><Class>{Step.InputProperties.StServiceCallActivity11.Body.CreateFlightOrder.FlightOrder.Class}</Class><CustomerName>{DataSource.Customers.Name}</CustomerName><DepartureDate>{Step.InputProperties.StServiceCallActivity11.Body.CreateFlightOrder.FlightOrder.DepartureDate}</DepartureDate><FlightNumber>{Step.InputProperties.StServiceCallActivity11.Body.CreateFlightOrder.FlightOrder.FlightNumber}</FlightNumber><NumberOfTickets>{Step.InputProperties.StServiceCallActivity11.Body.CreateFlightOrder.FlightOrder.NumberOfTickets}</NumberOfTickets><OrderNumber>{Step.OutputProperties.StServiceCallActivity11.Body.CreateFlightOrderResponse.CreateFlightOrderResult.OrderNumber}</OrderNumber></FlightOrder></GetFlightOrdersResult></GetFlightOrdersResponse></Body></Envelope>");
            _flow.StServiceCallActivity12.ExpectedOutputProperties = StServiceCallActivity12_ExpectedOutputProperties_Document;
            XmlDocument StServiceCallActivity12_ExpectedFaultProperties_Document = new XmlDocument();
            StServiceCallActivity12_ExpectedFaultProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity12_ExpectedFaultProperties_Document.LoadXml(
@"<tns:Envelope xmlns:tns=""http://schemas.xmlsoap.org/soap/envelope/""><tns:Body><tns:Fault><faultcode /><faultstring /></tns:Fault></tns:Body></tns:Envelope>");
            _flow.StServiceCallActivity12.ExpectedFaultProperties = StServiceCallActivity12_ExpectedFaultProperties_Document;
            XmlDocument StServiceCallActivity12_ExpectedOutputAttachments_Document = new XmlDocument();
            StServiceCallActivity12_ExpectedOutputAttachments_Document.PreserveWhitespace = true;
            StServiceCallActivity12_ExpectedOutputAttachments_Document.LoadXml(
@"<OutputAttachments />");
            _flow.StServiceCallActivity12.ExpectedOutputAttachments = StServiceCallActivity12_ExpectedOutputAttachments_Document;
            VTDPropertyInfoBase pi199 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='Class'][1]");
            VTDBaseGetter binding_getter100 = new VTDXPathGetter(pi199,XmlTypeCode.String);
            VTDPropertyInfoBase pi200 = new VTDPropertyInfoBase("ExpectedOutputProperties","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrdersResponse'][1]/*[local-name(.)='GetFlightOrdersResult'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='Class'][1]");
            VTDBaseSetter binding_setter100 = new VTDCheckpointSetter(XmlTypeCode.String);
            binding_setter100 = new StringFormaterDecorator(binding_setter100,"{Step.InputProperties.StServiceCallActivity11.Body.CreateFlightOrder.FlightOrder.Class}");
            bind_dir100 = new BindDirection(_flow.StServiceCallActivity11,binding_getter100,binding_setter100,BindTargetType.ToInProperty);
            VTDPropertyInfoBase pi201 = new VTDPropertyInfoBase("Name");
            VTDBaseGetter binding_getter101 = new VTDObjectGetter(pi201);
            VTDPropertyInfoBase pi202 = new VTDPropertyInfoBase("ExpectedOutputProperties","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrdersResponse'][1]/*[local-name(.)='GetFlightOrdersResult'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='CustomerName'][1]");
            VTDBaseSetter binding_setter101 = new VTDCheckpointSetter(XmlTypeCode.String);
            binding_setter101 = new StringFormaterDecorator(binding_setter101,"{DataSource.Customers.Name}");
            bind_dir101 = new BindDirection(this.DataCursorActivity18,binding_getter101,binding_setter101,BindTargetType.ToInProperty);
            VTDPropertyInfoBase pi203 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='FlightNumber'][1]");
            VTDBaseGetter binding_getter102 = new VTDXPathGetter(pi203,XmlTypeCode.Int);
            VTDPropertyInfoBase pi204 = new VTDPropertyInfoBase("ExpectedOutputProperties","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrdersResponse'][1]/*[local-name(.)='GetFlightOrdersResult'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='FlightNumber'][1]");
            VTDBaseSetter binding_setter102 = new VTDCheckpointSetter(XmlTypeCode.Int);
            bind_dir102 = new BindDirection(_flow.StServiceCallActivity11,binding_getter102,binding_setter102,BindTargetType.ToInProperty);
            VTDPropertyInfoBase pi205 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='NumberOfTickets'][1]");
            VTDBaseGetter binding_getter103 = new VTDXPathGetter(pi205,XmlTypeCode.Int);
            VTDPropertyInfoBase pi206 = new VTDPropertyInfoBase("ExpectedOutputProperties","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrdersResponse'][1]/*[local-name(.)='GetFlightOrdersResult'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='NumberOfTickets'][1]");
            VTDBaseSetter binding_setter103 = new VTDCheckpointSetter(XmlTypeCode.Int);
            bind_dir103 = new BindDirection(_flow.StServiceCallActivity11,binding_getter103,binding_setter103,BindTargetType.ToInProperty);
            VTDPropertyInfoBase pi207 = new VTDPropertyInfoBase("OutputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrderResponse'][1]/*[local-name(.)='CreateFlightOrderResult'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseGetter binding_getter104 = new VTDXPathGetter(pi207,XmlTypeCode.Int);
            VTDPropertyInfoBase pi208 = new VTDPropertyInfoBase("ExpectedOutputProperties","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrdersResponse'][1]/*[local-name(.)='GetFlightOrdersResult'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseSetter binding_setter104 = new VTDCheckpointSetter(XmlTypeCode.Int);
            bind_dir104 = new BindDirection(_flow.StServiceCallActivity11,binding_getter104,binding_setter104,BindTargetType.ToInProperty);
            set_StServiceCallActivity12_checkpoints(_flow.StServiceCallActivity12);
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    